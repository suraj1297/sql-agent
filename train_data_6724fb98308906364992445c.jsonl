{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who have opted to be added to the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the names of products along with their categories.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders that have notes attached.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE notes IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all menu items with their prices.\n"},{"role":"assistant","content":"SELECT menu_items.id, menu_items.price FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the first and last names of customers from a specific state 'California'.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE state = 'California';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total number of paid orders.\n"},{"role":"assistant","content":"SELECT COUNT(*) FROM orders_table WHERE paid = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all distinct product types available.\n"},{"role":"assistant","content":"SELECT DISTINCT product_types FROM categories;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all sales units and their values.\n"},{"role":"assistant","content":"SELECT product_name, sales_unit_val FROM sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList orders that are pre-orders.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all products along with their descriptions.\n"},{"role":"assistant","content":"SELECT product_name, description FROM products_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers with their email addresses.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet names and quantities of products sold in December.\n"},{"role":"assistant","content":"SELECT product_name, of_sales_unit_sold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders that were picked up on December 25, 2023.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE pickup_date = '2023-12-25';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList customers who have not provided a phone number.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE phone_number IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all menu items that cost more than $10.\n"},{"role":"assistant","content":"SELECT product_id, price FROM menu_items WHERE price > 10.00;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve products that have been sold in units greater than 100 in December.\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december WHERE of_sales_unit_sold > 100;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total revenue generated by each product type in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(value_of_sales_unit * actual_sold) AS total_revenue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers living in 'New York'.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE city = 'New York';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind products with no description.\n"},{"role":"assistant","content":"SELECT product_name FROM products_table WHERE description IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all categories and the total number of products in each category.\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(p.id) AS total_products FROM categories c LEFT JOIN products_table p ON c.id = p.category_id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of orders placed by each customer, including their full name.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name, COUNT(o.id) AS total_orders FROM customers c LEFT JOIN orders_table o ON c.id = o.customer_id GROUP BY c.first_name, c.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the average price of menu items for each product type.\n"},{"role":"assistant","content":"SELECT ct.product_types, AVG(mi.price) AS average_price FROM categories ct JOIN products_table pt ON ct.id = pt.category_id JOIN menu_items mi ON pt.id = mi.product_id GROUP BY ct.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the pickup dates and the corresponding number of orders placed on each date.\n"},{"role":"assistant","content":"SELECT pickup_date, COUNT(id) AS number_of_orders FROM orders_table WHERE pickup_date IS NOT NULL GROUP BY pickup_date;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who have opted to be added to the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the details of orders including order ID and whether they're paid or pre-ordered.\n"},{"role":"assistant","content":"SELECT id AS order_id, paid, pre_order FROM orders_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet a list of products along with their product type and description.\n"},{"role":"assistant","content":"SELECT pt.product_name, c.product_types, pt.description FROM products_table pt JOIN categories c ON pt.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total revenue generated from all sales units of a specific product.\n"},{"role":"assistant","content":"SELECT mi.product_id, SUM(mi.price * oi.quantity) AS total_revenue FROM menu_items mi JOIN order_items oi ON mi.id = oi.menu_item_id WHERE mi.product_id = ? GROUP BY mi.product_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet details of all menu items including the associated product name and sales unit.\n"},{"role":"assistant","content":"SELECT mi.id, pt.product_name, su.sales_unit_val, mi.price FROM menu_items mi JOIN products_table pt ON mi.product_id = pt.id JOIN sales_unit su ON mi.sales_unit_id = su.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow customers who live in a specific state along with their contact details.\n"},{"role":"assistant","content":"SELECT first_name, last_name, street_address, city, zip_code, phone_number FROM customers WHERE state = ?;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all unplaced orders, showing customer's name and order details.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name, o.id AS order_id, o.notes FROM orders_table o LEFT JOIN customers c ON o.customer_id = c.id WHERE o.paid IS FALSE OR o.pre_order IS TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the quantity sold for each product and its associated revenue in December.\n"},{"role":"assistant","content":"SELECT ProductName, ofSalesUnitSold AS quantity_sold, (ofSalesUnitSold * ValueofSalesUnit) AS revenue FROM Orders_December;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet a list of all unique product types that have sold at least one unit.\n"},{"role":"assistant","content":"SELECT DISTINCT od.product_types FROM orders_december od WHERE od.of_sales_unit_sold > 0;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the total sales units sold across all orders in December.\n"},{"role":"assistant","content":"SELECT SUM(of_sales_unit_sold) AS total_sales_units_sold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the average order value by summing the total revenue and dividing by total orders.\n"},{"role":"assistant","content":"SELECT SUM(ValueofSalesUnit * ofSalesUnitSold) / COUNT(DISTINCT(order_id)) AS average_order_value FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay all products that do not belong to any category.\n"},{"role":"assistant","content":"SELECT pt.product_name FROM products_table pt LEFT JOIN categories c ON pt.category_id = c.id WHERE pt.category_id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow information on orders that have no associated order items.\n"},{"role":"assistant","content":"SELECT o.id, o.customer_id, o.notes FROM orders_table o LEFT JOIN order_items oi ON o.id = oi.order_id WHERE oi.id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the total number of different product types available in the system.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_types) AS total_product_types FROM categories;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products along with their categories.\n"},{"role":"assistant","content":"SELECT p.product_name, c.product_types FROM products_table p JOIN categories c ON p.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders that were prepaid and the customers who placed them.\n"},{"role":"assistant","content":"SELECT o.id AS OrderID, c.first_name, c.last_name FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total revenue generated from each product.\n"},{"role":"assistant","content":"SELECT p.product_name, SUM(oi.quantity * mi.price) AS TotalRevenue FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id GROUP BY p.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the orders with their pickup dates and the products included in each order.\n"},{"role":"assistant","content":"SELECT o.id AS OrderID, o.pickup_date, p.product_name FROM orders_table o JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify which products have not been sold at all.\n"},{"role":"assistant","content":"SELECT p.product_name FROM products_table p LEFT JOIN menu_items mi ON p.id = mi.product_id LEFT JOIN order_items oi ON mi.id = oi.menu_item_id WHERE oi.id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the most popular product based on sales quantity.\n"},{"role":"assistant","content":"SELECT p.product_name, SUM(oi.quantity) AS TotalSold FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id GROUP BY p.product_name ORDER BY TotalSold DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all customers who have ordered a specific product.\n"},{"role":"assistant","content":"SELECT DISTINCT c.first_name, c.last_name FROM customers c JOIN orders_table o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id WHERE p.product_name = 'Specific Product Name';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList each customer and the total number of orders they have made.\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name, COUNT(o.id) AS TotalOrders FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY c.first_name, c.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich product category has generated the highest revenue?\n"},{"role":"assistant","content":"SELECT c.product_types, SUM(oi.quantity * mi.price) AS TotalRevenue FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id JOIN categories c ON p.category_id = c.id GROUP BY c.product_types ORDER BY TotalRevenue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of products sold in December.\n"},{"role":"assistant","content":"SELECT p.product_name, SUM(od.actual_sold) AS TotalSold FROM orders_december od JOIN products_table p ON od.product_name = p.product_name GROUP BY p.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who are on the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all products for which there's no order in December.\n"},{"role":"assistant","content":"SELECT p.product_name FROM products_table p LEFT JOIN orders_december od ON p.product_name = od.product_name WHERE od.product_name IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total sales for each sales unit.\n"},{"role":"assistant","content":"SELECT su.sales_unit, SUM(oi.quantity) AS TotalSales FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN sales_unit su ON mi.sales_unit_id = su.id GROUP BY su.sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind customers who have more than one order in the system.\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name, COUNT(o.id) AS OrderCount FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY c.first_name, c.last_name HAVING COUNT(o.id) > 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat are the products and their prices on the menu?\n"},{"role":"assistant","content":"SELECT p.product_name, mi.price FROM menu_items mi JOIN products_table p ON mi.product_id = p.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all products along with their sale units and values.\n"},{"role":"assistant","content":"SELECT p.product_name, su.sales_unit, mi.price AS SalesValue FROM menu_items mi JOIN products_table p ON mi.product_id = p.id JOIN sales_unit su ON mi.sales_unit_id = su.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many orders included the product called 'Example Product'?\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT o.id) AS NumberOfOrders FROM orders_table o JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id WHERE p.product_name = 'Example Product';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who have made a purchase and their total number of orders.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, COUNT(orders_table.id) as total_orders\nFROM customers\nJOIN orders_table ON customers.id = orders_table.customer_id\nGROUP BY customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total revenue generated by each product type.\n"},{"role":"assistant","content":"SELECT categories.product_types, SUM(order_items.quantity * menu_items.price) AS total_revenue\nFROM categories\nJOIN products_table ON categories.id = products_table.category_id\nJOIN menu_items ON products_table.id = menu_items.product_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average order value for each customer.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, AVG(order_items.quantity * menu_items.price) AS average_order_value\nFROM customers\nJOIN orders_table ON customers.id = orders_table.customer_id\nJOIN order_items ON orders_table.id = order_items.order_id\nJOIN menu_items ON order_items.menu_item_id = menu_items.id\nGROUP BY customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products and the number of units sold sorted by the highest quantity.\n"},{"role":"assistant","content":"SELECT products_table.product_name, SUM(order_items.quantity) AS units_sold\nFROM products_table\nJOIN menu_items ON products_table.id = menu_items.product_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY products_table.product_name\nORDER BY units_sold DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the total sales revenue for each city.\n"},{"role":"assistant","content":"SELECT customers.city, SUM(order_items.quantity * menu_items.price) AS total_revenue\nFROM customers\nJOIN orders_table ON customers.id = orders_table.customer_id\nJOIN order_items ON orders_table.id = order_items.order_id\nJOIN menu_items ON order_items.menu_item_id = menu_items.id\nGROUP BY customers.city;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the top three products that generated the most revenue.\n"},{"role":"assistant","content":"SELECT products_table.product_name, SUM(order_items.quantity * menu_items.price) AS total_revenue\nFROM products_table\nJOIN menu_items ON products_table.id = menu_items.product_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY products_table.product_name\nORDER BY total_revenue DESC\nLIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the average sales unit sold for each product type in December.\n"},{"role":"assistant","content":"SELECT product_types, AVG(of_sales_unit_sold) AS average_sales_units\nFROM orders_december\nGROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the customer with the highest total spending.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, SUM(order_items.quantity * menu_items.price) AS total_spent\nFROM customers\nJOIN orders_table ON customers.id = orders_table.customer_id\nJOIN order_items ON orders_table.id = order_items.order_id\nJOIN menu_items ON order_items.menu_item_id = menu_items.id\nGROUP BY customers.id\nORDER BY total_spent DESC\nLIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all categories and the total number of products they have.\n"},{"role":"assistant","content":"SELECT categories.product_types, COUNT(products_table.id) AS total_products\nFROM categories\nJOIN products_table ON categories.id = products_table.category_id\nGROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind out which state generated the most revenue.\n"},{"role":"assistant","content":"SELECT customers.state, SUM(order_items.quantity * menu_items.price) AS total_revenue\nFROM customers\nJOIN orders_table ON customers.id = orders_table.customer_id\nJOIN order_items ON orders_table.id = order_items.order_id\nJOIN menu_items ON order_items.menu_item_id = menu_items.id\nGROUP BY customers.state\nORDER BY total_revenue DESC\nLIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the most popular sales unit based on quantity sold.\n"},{"role":"assistant","content":"SELECT sales_unit.product_name, SUM(order_items.quantity) AS total_sold\nFROM sales_unit\nJOIN menu_items ON sales_unit.id = menu_items.sales_unit_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY sales_unit.product_name\nORDER BY total_sold DESC\nLIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the number of pre-orders placed.\n"},{"role":"assistant","content":"SELECT COUNT(id) AS total_preorders\nFROM orders_table\nWHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDetermine which product was most frequently purchased in December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold) AS total_purchased\nFROM orders_december\nGROUP BY product_name\nORDER BY total_purchased DESC\nLIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of customers who added to the mailing list.\n"},{"role":"assistant","content":"SELECT COUNT(id) AS total_mailing_list_customers\nFROM customers\nWHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nProvide the order notes for unpaid orders.\n"},{"role":"assistant","content":"SELECT notes\nFROM orders_table\nWHERE paid = FALSE AND notes IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products that have never been sold.\n"},{"role":"assistant","content":"SELECT products_table.product_name\nFROM products_table\nLEFT JOIN menu_items ON products_table.id = menu_items.product_id\nLEFT JOIN order_items ON menu_items.id = order_items.menu_item_id\nWHERE order_items.id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the total value of sales for each product, grouped by category.\n"},{"role":"assistant","content":"SELECT categories.product_types, products_table.product_name, SUM(order_items.quantity * menu_items.price) AS total_sales_value\nFROM categories\nJOIN products_table ON categories.id = products_table.category_id\nJOIN menu_items ON products_table.id = menu_items.product_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY categories.product_types, products_table.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify which product category had the highest sales volume in quantity.\n"},{"role":"assistant","content":"SELECT categories.product_types, SUM(order_items.quantity) AS total_quantity\nFROM categories\nJOIN products_table ON categories.id = products_table.category_id\nJOIN menu_items ON products_table.id = menu_items.product_id\nJOIN order_items ON menu_items.id = order_items.menu_item_id\nGROUP BY categories.product_types\nORDER BY total_quantity DESC\nLIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay all customers who have chosen to be added to the mailing list along with their email address and phone number.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email, phone_number FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the total number of orders made by each customer along with their names.\n"},{"role":"assistant","content":"WITH OrderCounts AS ( SELECT customer_id, COUNT(id) AS total_orders FROM orders_table GROUP BY customer_id ) SELECT c.first_name, c.last_name, oc.total_orders FROM customers c JOIN OrderCounts oc ON c.id = oc.customer_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all menu items with product names and their prices.\n"},{"role":"assistant","content":"SELECT p.product_name, m.price FROM menu_items m JOIN products_table p ON m.product_id = p.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGenerate a list of all product types including the number of different products available in each type.\n"},{"role":"assistant","content":"WITH ProductCounts AS ( SELECT category_id, COUNT(id) AS total_products FROM products_table GROUP BY category_id ) SELECT c.product_types, pc.total_products FROM categories c JOIN ProductCounts pc ON c.id = pc.category_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders that are marked as paid along with customer details who made those orders.\n"},{"role":"assistant","content":"SELECT o.id AS OrderID, c.first_name, c.last_name, c.email FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.paid = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the product name and its corresponding sales unit number for each menu item.\n"},{"role":"assistant","content":"SELECT p.product_name, s.sales_unit_val FROM menu_items m JOIN products_table p ON m.product_id = p.id JOIN sales_unit s ON m.sales_unit_id = s.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all orders with pickup dates in December 2023.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE EXTRACT(MONTH FROM pickup_date) = 12 AND EXTRACT(YEAR FROM pickup_date) = 2023;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow product names and the total quantities sold in December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold) AS total_quantity_sold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all unpaid orders together with the names of the customers who placed them.\n"},{"role":"assistant","content":"SELECT o.id AS order_id, c.first_name, c.last_name FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all the distinct product types available in the categories.\n"},{"role":"assistant","content":"SELECT DISTINCT product_types FROM categories;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total revenue for all products sold in December.\n"},{"role":"assistant","content":"SELECT SUM(actual_sold) AS total_revenue FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFetch all orders that were pre-orders along with relevant customer information.\n"},{"role":"assistant","content":"SELECT o.id AS order_id, c.first_name, c.last_name FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay the products that have been used in orders along with how often each was ordered, sorted by frequency.\n"},{"role":"assistant","content":"WITH OrderFrequency AS ( SELECT menu_item_id, COUNT(*) AS order_count FROM order_items GROUP BY menu_item_id ) SELECT p.product_name, of.order_count FROM OrderFrequency of JOIN menu_items mi ON of.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id ORDER BY of.order_count DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the customers who have ordered more than ten times.\n"},{"role":"assistant","content":"WITH CustomerOrderCount AS ( SELECT customer_id, COUNT(id) AS order_count FROM orders_table GROUP BY customer_id ) SELECT c.first_name, c.last_name, coc.order_count FROM CustomerOrderCount coc JOIN customers c ON coc.customer_id = c.id WHERE coc.order_count > 10;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all unique states where customers are located.\n"},{"role":"assistant","content":"SELECT DISTINCT state FROM customers WHERE state IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the latest order details along with customer information.\n"},{"role":"assistant","content":"SELECT o.id AS OrderID, c.first_name, c.last_name, o.pickup_date FROM orders_table o JOIN customers c ON o.customer_id = c.id ORDER BY o.id DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all menu items sold along with the number of sales units actually sold for each.\n"},{"role":"assistant","content":"SELECT m.product_id, p.product_name, od.actual_sold FROM orders_december od JOIN menu_items m ON od.product_name = m.product_id JOIN products_table p ON m.product_id = p.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customer records, including any noted comments and if they're on the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email, add_to_mailing_list, other_notes FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat are the total sales (in revenue and quantity) for each product category in December?\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue, SUM(of_sales_unit_sold) AS TotalQuantity FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of products sold grouped by product type.\n"},{"role":"assistant","content":"SELECT product_types, COUNT(DISTINCT product_name) AS TotalProductsSold FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nProvide the total revenue for each product name sold.\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the total quantity of each product type sold in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS TotalQuantitySold FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the average sales unit price per product type.\n"},{"role":"assistant","content":"SELECT product_types, AVG(value_of_sales_unit) AS AverageSalesPrice FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total revenue within each sales unit category?\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average number of sales units sold for each product name.\n"},{"role":"assistant","content":"SELECT product_name, AVG(of_sales_unit_sold) AS AverageUnitsSold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the most and least sold products by name.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS TotalSold FROM orders_december GROUP BY product_name ORDER BY TotalSold DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the highest revenue-generating product type in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue FROM orders_december GROUP BY product_types ORDER BY TotalRevenue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDetermine the total number of different products sold in December.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_name) AS UniqueProductsSold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total quantity and revenue of products sold for the top sales unit?\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS TotalQuantity, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue FROM orders_december GROUP BY sales_unit ORDER BY TotalRevenue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the total revenue earned from each sales unit.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold * value_of_sales_unit) AS TotalRevenue FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the average revenue per product name?\n"},{"role":"assistant","content":"SELECT product_name, AVG(value_of_sales_unit * of_sales_unit_sold) AS AverageRevenue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nProvide the total quantity sold per sales unit.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS TotalQuantitySold FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the product types with their respective total sales quantities ordered by sales quantity.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS TotalQuantity FROM orders_december GROUP BY product_types ORDER BY TotalQuantity DESC;"}]}
