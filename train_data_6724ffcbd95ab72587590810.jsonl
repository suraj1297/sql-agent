{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow me all customers who are part of the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat are the names and categories of all products available?\n"},{"role":"assistant","content":"SELECT pt.product_name, c.product_types FROM products_table pt JOIN categories c ON pt.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all unpaid orders along with customer names.\n"},{"role":"assistant","content":"SELECT o.id AS order_id, c.first_name, c.last_name FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat is the total number of sales units sold for each product?\n"},{"role":"assistant","content":"SELECT p.product_name, SUM(oi.quantity * su.sales_unit_val) AS total_sales_units FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id JOIN sales_unit su ON mi.sales_unit_id = su.id GROUP BY p.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGive me a list of all cities where customers reside.\n"},{"role":"assistant","content":"SELECT DISTINCT city FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind all pre-orders with their respective customer emails.\n"},{"role":"assistant","content":"SELECT o.id, c.email FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat are the available products and their prices on the menu?\n"},{"role":"assistant","content":"SELECT p.product_name, m.price FROM menu_items m JOIN products_table p ON m.product_id = p.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the total number of products in each category.\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(pt.id) as total_products FROM categories c LEFT JOIN products_table pt ON pt.category_id = c.id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich products have been listed as menu items and their respective categories?\n"},{"role":"assistant","content":"SELECT p.product_name, c.product_types FROM menu_items mi JOIN products_table p ON mi.product_id = p.id JOIN categories c ON p.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nSee the list of all customers who have placed an order more than once.\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY c.id, c.first_name, c.last_name HAVING COUNT(o.id) > 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nRetrieve all order notes for orders to be picked up after a specific date.\n"},{"role":"assistant","content":"SELECT o.notes FROM orders_table o WHERE o.pickup_date > '2023-01-01';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat are the sales units and their values for each product name?\n"},{"role":"assistant","content":"SELECT p.product_name, su.sales_unit_val FROM products_table p JOIN menu_items mi ON p.id = mi.product_id JOIN sales_unit su ON mi.sales_unit_id = su.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the total quantity and revenue for each product type sold in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) as total_quantity, SUM(value_of_sales_unit) as total_revenue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all products and the quantity sold from the orders in December table.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS quantity_sold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nCan you find the total sales value for each sales unit in December?\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(value_of_sales_unit) AS total_sales_value FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nRetrieve the full names and email addresses of all customers who have made pre-orders.\n"},{"role":"assistant","content":"SELECT first_name || ' ' || last_name AS full_name, email FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the total number of products sold per category and their total revenue.\n"},{"role":"assistant","content":"SELECT categories.product_types, SUM(quantity) AS TotalProductsSold, SUM(quantity * price) AS TotalRevenue FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all customers who are on the mailing list along with their addresses.\n"},{"role":"assistant","content":"SELECT first_name, last_name, street_address, city, state, zip_code FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the average price of products in each sales unit.\n"},{"role":"assistant","content":"SELECT sales_unit.product_name, AVG(price) AS AveragePrice FROM menu_items JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id GROUP BY sales_unit.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the names of products and their categories that were ordered on a specific date.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id WHERE orders_table.pickup_date = '2023-12-01';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nDetermine the total revenue from paid and unpaid orders separately.\n"},{"role":"assistant","content":"SELECT paid, SUM(quantity * price) AS TotalRevenue FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY paid;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nExtract the list of products that have never been pre-ordered.\n"},{"role":"assistant","content":"SELECT product_name FROM products_table WHERE id NOT IN (SELECT DISTINCT product_id FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id WHERE pre_order = TRUE);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nIdentify the cities with the highest number of pre-orders from customers.\n"},{"role":"assistant","content":"SELECT city, COUNT(*) AS PreOrderCount FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE pre_order = TRUE GROUP BY city ORDER BY PreOrderCount DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList products along with their categories where the total quantity sold was more than 100 units.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id WHERE orders_december.of_sales_unit_sold > 100;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the total number of each product sold and group them by state.\n"},{"role":"assistant","content":"SELECT state, products_table.product_name, SUM(order_items.quantity) AS TotalSold FROM customers JOIN orders_table ON customers.id = orders_table.customer_id JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id GROUP BY state, products_table.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind all customers who haven't placed any orders.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE id NOT IN (SELECT DISTINCT customer_id FROM orders_table);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nRetrieve product names and their total sales revenue for each category.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types, SUM(order_items.quantity * menu_items.price) AS TotalRevenue FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id GROUP BY products_table.product_name, categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow all orders that have a specific product and their corresponding pick-up dates.\n"},{"role":"assistant","content":"SELECT orders_table.id, orders_table.pickup_date FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN orders_table ON order_items.order_id = orders_table.id WHERE products_table.product_name = 'Product Name Here';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nCalculate the average order value for all the orders placed in December.\n"},{"role":"assistant","content":"SELECT AVG(order_total) FROM (SELECT orders_table.id, SUM(order_items.quantity * menu_items.price) AS order_total FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id WHERE orders_table.pickup_date BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY orders_table.id) AS DecemberOrderTotals;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nIdentify the most popular product category by total sales unit sold.\n"},{"role":"assistant","content":"SELECT categories.product_types, SUM(orders_december.of_sales_unit_sold) AS TotalUnitsSold FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types ORDER BY TotalUnitsSold DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the email addresses of customers who have placed more than 5 orders.\n"},{"role":"assistant","content":"SELECT email FROM customers WHERE id IN (SELECT customer_id FROM orders_table GROUP BY customer_id HAVING COUNT(id) > 5);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the product names and the sales units for each that have been ordered more than 500 times.\n"},{"role":"assistant","content":"SELECT product_name, sales_unit_val FROM sales_unit JOIN menu_items ON sales_unit.id = menu_items.sales_unit_id WHERE product_id IN (SELECT product_id FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY product_id HAVING SUM(quantity) > 500);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet a list of all products, their categories, and the number of units sold last December.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types, SUM(order_items.quantity) AS UnitsSold FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id JOIN orders_table ON order_items.order_id = orders_table.id WHERE orders_table.pickup_date BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY products_table.product_name, categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat are the details of all orders that were pre-ordered?\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name, orders_table.pickup_date FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE orders_table.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow all customers who have purchased a specific product name.\n"},{"role":"assistant","content":"SELECT DISTINCT customers.first_name, customers.last_name FROM customers JOIN orders_table ON customers.id = orders_table.customer_id JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id WHERE products_table.product_name = 'SpecificProductName';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the product types and total revenue for each type sold in December.\n"},{"role":"assistant","content":"SELECT categories.product_types, SUM(orders_december.actual_sold) AS TotalRevenue FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich customers have opted in for the mailing list?\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind all orders with unpaid status with customer details.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name, customers.email FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE orders_table.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat are the details of products and their sales units?\n"},{"role":"assistant","content":"SELECT products_table.product_name, sales_unit.sales_unit_val FROM products_table JOIN menu_items ON products_table.id = menu_items.product_id JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all products along with the categories they belong to.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich orders were picked up and by whom?\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE orders_table.pickup_date IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow all menu items with their prices.\n"},{"role":"assistant","content":"SELECT menu_items.id, products_table.product_name, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nHow many products were ordered in each order?\n"},{"role":"assistant","content":"SELECT orders_table.id AS OrderID, COUNT(order_items.id) AS NumberOfProducts FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id GROUP BY orders_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the orders made by customers living in a specific city.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE customers.city = 'SpecificCity';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the total quantity and value of each product sold in December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold) AS TotalQuantity, SUM(value_of_sales_unit) AS TotalSalesValue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich categories of products have not been sold in December?\n"},{"role":"assistant","content":"SELECT categories.product_types FROM categories LEFT JOIN products_table ON categories.id = products_table.category_id LEFT JOIN orders_december ON products_table.product_name = orders_december.product_name WHERE orders_december.actual_sold IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhat products were most frequently pre-ordered?\n"},{"role":"assistant","content":"SELECT products_table.product_name, COUNT(order_items.id) AS OrderCount FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN orders_table ON order_items.order_id = orders_table.id WHERE orders_table.pre_order = TRUE GROUP BY products_table.product_name ORDER BY OrderCount DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the average price of menu items for each product type.\n"},{"role":"assistant","content":"SELECT categories.product_types, AVG(menu_items.price) AS AveragePrice FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all sales units with their corresponding products.\n"},{"role":"assistant","content":"SELECT sales_unit.sales_unit_val, products_table.product_name FROM sales_unit JOIN menu_items ON sales_unit.id = menu_items.sales_unit_id JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nHow much total revenue was generated from pre-orders?\n"},{"role":"assistant","content":"SELECT SUM(orders_december.actual_sold) AS TotalRevenue FROM orders_table JOIN orders_december ON orders_table.id = order_items.order_id AND orders_table.pre_order = TRUE WHERE order_items.menu_item_id = menu_items.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the total revenue generated by each category.\n"},{"role":"assistant","content":"SELECT C.product_types, SUM(OD.actual_sold) AS TotalRevenue FROM orders_december OD JOIN products_table P ON OD.product_name = P.product_name JOIN categories C ON P.category_id = C.id GROUP BY C.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the average quantity sold of each product using window functions.\n"},{"role":"assistant","content":"SELECT product_name, AVG(actual_sold) OVER (PARTITION BY product_name) AS AverageQuantity FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich customer made the highest number of orders?\n"},{"role":"assistant","content":"SELECT C.first_name, C.last_name, COUNT(O.id) AS OrderCount FROM customers C JOIN orders_table O ON C.id = O.customer_id GROUP BY C.id ORDER BY OrderCount DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all menu items with their respective prices and the total units sold for each.\n"},{"role":"assistant","content":"SELECT MI.product_id, MI.price, SUM(OI.quantity) AS TotalUnitsSold FROM menu_items MI JOIN order_items OI ON MI.id = OI.menu_item_id GROUP BY MI.product_id, MI.price;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the maximum quantity sold in a single order for each product.\n"},{"role":"assistant","content":"SELECT product_name, MAX(quantity) AS MaxQuantitySold FROM order_items OI JOIN menu_items MI ON OI.menu_item_id = MI.id JOIN products_table P ON MI.product_id = P.id GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the total revenue each customer generated and rank them by revenue using window functions.\n"},{"role":"assistant","content":"SELECT first_name, last_name, SUM(total_spent) AS TotalRevenue, RANK() OVER (ORDER BY SUM(total_spent) DESC) AS RevenueRank FROM ( SELECT C.first_name, C.last_name, O.id, SUM(OI.quantity * MI.price) AS total_spent FROM customers C JOIN orders_table O ON C.id = O.customer_id JOIN order_items OI ON O.id = OI.order_id JOIN menu_items MI ON OI.menu_item_id = MI.id GROUP BY C.first_name, C.last_name, O.id ) AS customer_revenue GROUP BY first_name, last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow which product type had the highest sales revenue in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(actual_sold) AS TotalRevenue FROM orders_december GROUP BY product_types ORDER BY TotalRevenue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind out which products were ordered the most times irrespective of quantity.\n"},{"role":"assistant","content":"SELECT P.product_name, COUNT(OI.id) AS NumberOfOrders FROM order_items OI JOIN menu_items MI ON OI.menu_item_id = MI.id JOIN products_table P ON MI.product_id = P.id GROUP BY P.product_name ORDER BY NumberOfOrders DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nCalculate the cumulative revenue for each month using window functions.\n"},{"role":"assistant","content":"SELECT EXTRACT(MONTH FROM pickup_date) AS Month, SUM(OI.quantity * MI.price) AS Revenue, SUM(SUM(OI.quantity * MI.price)) OVER (ORDER BY EXTRACT(MONTH FROM pickup_date)) AS CumulativeRevenue FROM orders_table O JOIN order_items OI ON O.id = OI.order_id JOIN menu_items MI ON OI.menu_item_id = MI.id GROUP BY EXTRACT(MONTH FROM pickup_date);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all customers who are part of the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE add_to_mailing_list = true;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nIdentify which city has the highest number of customers.\n"},{"role":"assistant","content":"SELECT city, COUNT(id) AS NumberOfCustomers FROM customers GROUP BY city ORDER BY NumberOfCustomers DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nDisplay the products along with their sales unit values that have been sold at least once.\n"},{"role":"assistant","content":"SELECT DISTINCT P.product_name, SU.sales_unit_val FROM orders_december OD JOIN products_table P ON OD.product_name = P.product_name JOIN sales_unit SU ON SU.product_name = P.product_name WHERE OD.of_sales_unit_sold > 0;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nUsing window functions, show the first name, last name, and how many times they've ordered.\n"},{"role":"assistant","content":"SELECT first_name, last_name, COUNT(order_id) AS OrderCount, RANK() OVER (ORDER BY COUNT(order_id) DESC) AS OrderRank FROM customers C JOIN orders_table O ON C.id = O.customer_id GROUP BY first_name, last_name ORDER BY OrderCount DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nCalculate the average revenue per order for each customer.\n"},{"role":"assistant","content":"SELECT C.first_name, C.last_name, AVG(OrderRevenue) AS AverageRevenuePerOrder FROM ( SELECT O.customer_id, SUM(OI.quantity * MI.price) AS OrderRevenue FROM orders_table O JOIN order_items OI ON OI.order_id = O.id JOIN menu_items MI ON OI.menu_item_id = MI.id GROUP BY O.id ) AS OrderRevenues JOIN customers C ON OrderRevenues.customer_id = C.id GROUP BY C.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind out which products have generated more than $500 in sales during December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS TotalSales FROM orders_december GROUP BY product_name HAVING SUM(actual_sold) > 500;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow all products in a specific category and their total sales number.\n"},{"role":"assistant","content":"SELECT P.product_name, SUM(OI.quantity) AS TotalSales FROM products_table P JOIN categories C ON P.category_id = C.id JOIN menu_items MI ON P.id = MI.product_id JOIN order_items OI ON MI.id = OI.menu_item_id WHERE C.product_types = 'SpecificCategory' GROUP BY P.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nDetermine the number of orders placed each month.\n"},{"role":"assistant","content":"SELECT EXTRACT(MONTH FROM pickup_date) AS Month, COUNT(id) AS NumberOfOrders FROM orders_table GROUP BY EXTRACT(MONTH FROM pickup_date);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the products and their total sales values for December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS TotalSalesValue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nWhich products were pre-ordered the most?\n"},{"role":"assistant","content":"SELECT P.product_name, COUNT(O.id) AS PreOrderCount FROM orders_table O JOIN order_items OI ON O.id = OI.order_id JOIN menu_items MI ON OI.menu_item_id = MI.id JOIN products_table P ON MI.product_id = P.id WHERE O.pre_order = true GROUP BY P.product_name ORDER BY PreOrderCount DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the names and emails of customers who have made a pre-order.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE id IN (SELECT customer_id FROM orders_table WHERE pre_order = TRUE);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nIdentify all products with their categories.\n"},{"role":"assistant","content":"SELECT pt.product_name, c.product_types FROM products_table pt JOIN categories c ON pt.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFetch all orders with unpaid status and their pickup date.\n"},{"role":"assistant","content":"SELECT o.id, o.pickup_date FROM orders_table o WHERE paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all customers who are added to the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the total number of sales units sold for each sales unit type.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS total_units_sold FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nProvide a summary of total sales per customer.\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name, SUM(oi.quantity * mi.price) AS total_sales FROM order_items oi JOIN orders_table o ON oi.order_id = o.id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN customers c ON o.customer_id = c.id GROUP BY c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all products and their corresponding prices.\n"},{"role":"assistant","content":"SELECT pt.product_name, mi.price FROM products_table pt JOIN menu_items mi ON pt.id = mi.product_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow total actual sales amount for each product type.\n"},{"role":"assistant","content":"SELECT product_types, SUM(actual_sold) AS total_actual_sales FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nDisplay all orders that require pickup today.\n"},{"role":"assistant","content":"SELECT customer_id, pickup_date FROM orders_table WHERE pickup_date = CURRENT_DATE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nIdentify all categories that have no products listed.\n"},{"role":"assistant","content":"SELECT c.product_types FROM categories c LEFT JOIN products_table p ON c.id = p.category_id WHERE p.id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind products that have never been ordered.\n"},{"role":"assistant","content":"WITH OrderedProducts AS (SELECT DISTINCT product_id FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id) SELECT pt.product_name FROM products_table pt LEFT JOIN OrderedProducts op ON pt.id = op.product_id WHERE op.product_id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all menu items with their sales units and prices.\n"},{"role":"assistant","content":"SELECT pt.product_name, su.sales_unit_val, mi.price FROM menu_items mi JOIN products_table pt ON mi.product_id = pt.id JOIN sales_unit su ON mi.sales_unit_id = su.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nProvide a list of customers who have never placed an order.\n"},{"role":"assistant","content":"WITH CustomersWhoOrdered AS (SELECT DISTINCT customer_id FROM orders_table) SELECT c.first_name, c.last_name FROM customers c LEFT JOIN CustomersWhoOrdered co ON c.id = co.customer_id WHERE co.customer_id IS NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind total quantity and total revenue of each type of sales unit sold.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS total_quantity, SUM(value_of_sales_unit) AS total_revenue FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nRetrieve all products that have been pre-ordered.\n"},{"role":"assistant","content":"SELECT DISTINCT pt.product_name FROM products_table pt JOIN menu_items mi ON pt.id = mi.product_id JOIN order_items oi ON mi.id = oi.menu_item_id JOIN orders_table o ON oi.order_id = o.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList the ordered products with the highest total sales revenue.\n"},{"role":"assistant","content":"SELECT pt.product_name, SUM(oi.quantity * mi.price) AS total_sales FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table pt ON mi.product_id = pt.id GROUP BY pt.product_name ORDER BY total_sales DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet all products that belong to a specific category.\n"},{"role":"assistant","content":"SELECT product_name FROM products_table WHERE category_id = (SELECT id FROM categories WHERE product_types = 'specified_category');"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nHow many different customers have pre-ordered any items?\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT customer_id) FROM orders_table WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all states with the number of customers residing in each.\n"},{"role":"assistant","content":"SELECT state, COUNT(id) AS NumberOfCustomers FROM customers GROUP BY state;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the average order value for paid orders.\n"},{"role":"assistant","content":"SELECT AVG(oI.quantity * mI.price) AS AverageOrderValue FROM order_items oI JOIN menu_items mI ON oI.menu_item_id = mI.id JOIN orders_table oT ON oI.order_id = oT.id WHERE oT.paid = TRUE GROUP BY oT.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the total quantity sold for each product type in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS TotalQuantitySold FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the total revenue generated from pre-orders.\n"},{"role":"assistant","content":"SELECT SUM(oI.quantity * mI.price) AS TotalPreOrderRevenue FROM order_items oI JOIN menu_items mI ON oI.menu_item_id = mI.id JOIN orders_table oT ON oI.order_id = oT.id WHERE oT.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the average number of items per order.\n"},{"role":"assistant","content":"SELECT AVG(ItemCount) FROM (SELECT COUNT(oI.id) AS ItemCount FROM order_items oI GROUP BY oI.order_id) SubQuery;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all product categories and the total number of products in each category.\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(p.id) AS NumberOfProducts FROM categories c JOIN products_table p ON c.id = p.category_id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the total number of distinct customers who have placed orders.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT customer_id) AS NumberOfDistinctCustomers FROM orders_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the highest priced menu item and its price.\n"},{"role":"assistant","content":"SELECT product_id, MAX(price) AS HighestPrice FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the total revenue generated for each product in December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS TotalRevenue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind the average price of menu items in the system.\n"},{"role":"assistant","content":"SELECT AVG(price) AS AveragePrice FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nGet the total number of products sold for each sales unit type.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS TotalProductsSold FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind all cities and the total number of customers from each city.\n"},{"role":"assistant","content":"SELECT city, COUNT(id) AS NumberOfCustomers FROM customers GROUP BY city;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nShow the product with the lowest sales unit value and its value.\n"},{"role":"assistant","content":"SELECT product_name, MIN(sales_unit_val) AS LowestSalesUnitValue FROM sales_unit GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nList all orders with the total quantity of items ordered and whether they are paid.\n"},{"role":"assistant","content":"SELECT oT.id, SUM(oI.quantity) AS TotalQuantity, oT.paid FROM orders_table oT JOIN order_items oI ON oT.id = oI.order_id GROUP BY oT.id, oT.paid;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nCalculate the total value of all orders before a specific date.\n"},{"role":"assistant","content":"SELECT SUM(oI.quantity * mI.price) AS TotalValue FROM order_items oI JOIN menu_items mI ON oI.menu_item_id = mI.id JOIN orders_table oT ON oI.order_id = oT.id WHERE oT.pickup_date < '2023-01-01';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\n\nFind out how many products do not have any associated menu items.\n"},{"role":"assistant","content":"SELECT COUNT(p.id) AS ProductsWithoutMenuItems FROM products_table p LEFT JOIN menu_items m ON p.id = m.product_id WHERE m.id IS NULL;"}]}
