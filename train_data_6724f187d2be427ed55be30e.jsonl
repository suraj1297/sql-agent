{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products along with their category names.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all customer names and their email addresses.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders that are prepaid.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE paid = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all menu items with their prices.\n"},{"role":"assistant","content":"SELECT menu_items.id, product_name, price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the list of all customers subscribed to the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all pre-orders with their pickup dates.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFetch the sales unit values for each sales unit.\n"},{"role":"assistant","content":"SELECT product_name, sales_unit_val FROM sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products with their descriptions.\n"},{"role":"assistant","content":"SELECT product_name, description FROM products_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the total number of each product sold from the December orders.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS total_sold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all order details for a specific customer.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'John' AND last_name = 'Doe');"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products that belong to the 'Electronics' category.\n"},{"role":"assistant","content":"SELECT product_name FROM products_table JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Electronics';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total revenue for each product type in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(value_of_sales_unit * actual_sold) AS total_revenue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all city names where customers have placed orders.\n"},{"role":"assistant","content":"SELECT DISTINCT city FROM customers JOIN orders_table ON customers.id = orders_table.customer_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the names and phone numbers of customers who have purchased a specific product.\n"},{"role":"assistant","content":"SELECT DISTINCT first_name, last_name, phone_number FROM customers WHERE id IN (SELECT customer_id FROM orders_table INNER JOIN order_items ON orders_table.id = order_items.order_id INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id WHERE menu_items.product_id = (SELECT id FROM products_table WHERE product_name = 'Specific Product'));"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all order items with their quantities for a given menu item.\n"},{"role":"assistant","content":"SELECT order_id, quantity FROM order_items WHERE menu_item_id = (SELECT id FROM menu_items WHERE product_id = (SELECT id FROM products_table WHERE product_name = 'Product Name'));"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList email addresses of customers who have not yet made any payment.\n"},{"role":"assistant","content":"SELECT email FROM customers WHERE id IN (SELECT customer_id FROM orders_table WHERE paid = FALSE);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind products along with their prices that are used in a menu item.\n"},{"role":"assistant","content":"SELECT product_name, price FROM products_table JOIN menu_items ON products_table.id = menu_items.product_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total revenue generated for each product type.\n"},{"role":"assistant","content":"SELECT product_types, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who have placed pre-orders.\n"},{"role":"assistant","content":"SELECT DISTINCT c.first_name, c.last_name FROM customers c JOIN orders_table o ON c.id = o.customer_id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich products have been sold as pre-orders and how many units for each?\n"},{"role":"assistant","content":"SELECT pt.product_name, SUM(oi.quantity) AS total_units FROM order_items oi JOIN orders_table o ON oi.order_id = o.id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table pt ON mi.product_id = pt.id WHERE o.pre_order = TRUE GROUP BY pt.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the average sales value for each product category.\n"},{"role":"assistant","content":"SELECT c.product_types, AVG(od.value_of_sales_unit) AS average_sales_value FROM orders_december od JOIN products_table pt ON od.product_name = pt.product_name JOIN categories c ON pt.category_id = c.id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total number of products sold in December?\n"},{"role":"assistant","content":"SELECT SUM(of_sales_unit_sold) AS total_products_sold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify products with sales over 100 units in December.\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december WHERE of_sales_unit_sold > 100;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all menu items with their prices and corresponding product names.\n"},{"role":"assistant","content":"SELECT mi.id AS menu_item_id, mi.price, pt.product_name FROM menu_items mi JOIN products_table pt ON mi.product_id = pt.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWho are the customers with the most frequent orders?\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name, COUNT(o.id) AS order_count FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY c.first_name, c.last_name ORDER BY order_count DESC LIMIT 10;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFetch the details of orders made for a specific product by name.\n"},{"role":"assistant","content":"SELECT o.id, o.pickup_date, o.paid FROM orders_table o JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table pt ON mi.product_id = pt.id WHERE pt.product_name = 'Specific Product Name';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total sales revenue generated by each customer.\n"},{"role":"assistant","content":"SELECT c.first_name, c.last_name, SUM(oi.quantity * mi.price) AS total_revenue FROM customers c JOIN orders_table o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id GROUP BY c.first_name, c.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich products were ordered by customers not in the mailing list?\n"},{"role":"assistant","content":"SELECT DISTINCT pt.product_name FROM products_table pt JOIN menu_items mi ON pt.id = mi.product_id JOIN order_items oi ON mi.id = oi.menu_item_id JOIN orders_table o ON oi.order_id = o.id JOIN customers c ON o.customer_id = c.id WHERE c.add_to_mailing_list = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFetch the list of all unpaid orders along with customer details.\n"},{"role":"assistant","content":"SELECT o.id AS order_id, c.first_name, c.last_name, c.email FROM orders_table o JOIN customers c ON o.customer_id = c.id WHERE o.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat are the top 3 products by revenue sold in December?\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december GROUP BY product_name ORDER BY total_revenue DESC LIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many unique product types have orders placed in December?\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_types) AS unique_product_types FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the full name and email of customers who ordered a product in a specific category.\n"},{"role":"assistant","content":"SELECT DISTINCT c.first_name, c.last_name, c.email FROM customers c JOIN orders_table o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table pt ON mi.product_id = pt.id JOIN categories cat ON pt.category_id = cat.id WHERE cat.product_types = 'Specific Category';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products along with their total quantity sold and whether they were pre-ordered.\n"},{"role":"assistant","content":"SELECT pt.product_name, SUM(oi.quantity) AS total_quantity, o.pre_order FROM order_items oi JOIN orders_table o ON oi.order_id = o.id JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table pt ON mi.product_id = pt.id GROUP BY pt.product_name, o.pre_order;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all the customers who are subscribed to the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the full names and email addresses of customers who have placed an order.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, customers.email FROM customers JOIN orders_table ON customers.id = orders_table.customer_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the names and prices of all menu items along with the related product name.\n"},{"role":"assistant","content":"SELECT menu_items.price, products_table.product_name FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the full names of customers and the total number of orders they have made.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, COUNT(orders_table.id) AS total_orders FROM customers JOIN orders_table ON customers.id = orders_table.customer_id GROUP BY customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList out all the products along with their category names.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total number of products in each product category.\n"},{"role":"assistant","content":"SELECT categories.product_types, COUNT(products_table.id) AS product_count FROM categories JOIN products_table ON categories.id = products_table.category_id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all orders with the corresponding customer full names and email addresses.\n"},{"role":"assistant","content":"SELECT orders_table.id AS order_id, customers.first_name, customers.last_name, customers.email FROM orders_table JOIN customers ON orders_table.customer_id = customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the total revenue generated by each product type for December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(actual_sold) AS total_revenue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind out which products had their sales units as \"Box\" in December.\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december WHERE sales_unit = 'Box';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the products with their sales unit prices from the menu.\n"},{"role":"assistant","content":"SELECT products_table.product_name, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the names of the products that belong to a \"Beverages\" category.\n"},{"role":"assistant","content":"SELECT products_table.product_name FROM products_table JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Beverages';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet all the orders that were not paid for yet along with customer details.\n"},{"role":"assistant","content":"SELECT orders_table.id AS order_id, customers.first_name, customers.last_name, customers.email FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE orders_table.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the products in the menu that have a price greater than $20.\n"},{"role":"assistant","content":"SELECT products_table.product_name, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id WHERE menu_items.price > 20;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve a list of customers with their phone numbers who have made a pre-order.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, customers.phone_number FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE orders_table.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow product names along with the sales units sold for each in December.\n"},{"role":"assistant","content":"SELECT product_name, of_sales_unit_sold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the products and categories which have not been sold at all in December.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id WHERE products_table.id NOT IN (SELECT DISTINCT product_id FROM orders_december);"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total number of different items included in orders by each customer.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, COUNT(DISTINCT order_items.menu_item_id) AS total_items FROM customers JOIN orders_table ON customers.id = orders_table.customer_id JOIN order_items ON orders_table.id = order_items.order_id GROUP BY customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products with the highest quantity sold in December.\n"},{"role":"assistant","content":"SELECT product_name, MAX(actual_sold) AS HighestQuantitySold FROM orders_december GROUP BY product_name ORDER BY HighestQuantitySold DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total revenue for each product type in descending order.\n"},{"role":"assistant","content":"SELECT product_types, SUM(value_of_sales_unit * actual_sold) AS TotalRevenue FROM orders_december GROUP BY product_types ORDER BY TotalRevenue DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the average quantity sold per sales unit for each product name?\n"},{"role":"assistant","content":"SELECT product_name, AVG(of_sales_unit_sold) AS AvgQuantityPerUnit FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich product types have sold more than 1000 units in total?\n"},{"role":"assistant","content":"SELECT product_types FROM orders_december GROUP BY product_types HAVING SUM(of_sales_unit_sold) > 1000;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total value of sales units sold for each product.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * of_sales_unit_sold) AS TotalValue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average sales value per product type.\n"},{"role":"assistant","content":"SELECT product_types, AVG(value_of_sales_unit * actual_sold) AS AvgSalesValue FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the top three products based on total sales value.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * actual_sold) AS TotalSalesValue FROM orders_december GROUP BY product_name ORDER BY TotalSalesValue DESC LIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the product with the lowest total revenue.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * actual_sold) AS TotalRevenue FROM orders_december GROUP BY product_name ORDER BY TotalRevenue ASC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total number of sales units sold for each product type.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS TotalSalesUnits FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify all products with average sales value over $500.\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december GROUP BY product_name HAVING AVG(value_of_sales_unit * actual_sold) > 500;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich sales unit had the highest average sales value in December?\n"},{"role":"assistant","content":"SELECT sales_unit, AVG(value_of_sales_unit * actual_sold) AS AvgSalesValue FROM orders_december GROUP BY sales_unit ORDER BY AvgSalesValue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the total and average quantity sold for each sales unit.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS TotalQuantitySold, AVG(of_sales_unit_sold) AS AvgQuantitySold FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDetermine the average revenue per order for each product name.\n"},{"role":"assistant","content":"SELECT product_name, AVG(value_of_sales_unit * actual_sold) AS AvgRevenuePerOrder FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the maximum quantity sold for each product type.\n"},{"role":"assistant","content":"SELECT product_types, MAX(actual_sold) AS MaxQuantitySold FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich products had less than 50% of sales units sold in comparison to total inventory?\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december WHERE of_sales_unit_sold < 0.5 * actual_sold GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList products with revenue exceeding $2000 in December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * actual_sold) AS Revenue FROM orders_december GROUP BY product_name HAVING Revenue > 2000;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total number of products sold for each category?\n"},{"role":"assistant","content":"SELECT product_types, COUNT(DISTINCT product_name) AS NumberOfProductsSold FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total revenue for each product category in December.\n"},{"role":"assistant","content":"SELECT c.product_types, SUM(o.actual_sold) AS TotalRevenue FROM orders_december o JOIN products_table p ON o.product_name = p.product_name JOIN categories c ON p.category_id = c.id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many menu items have been sold for each product type?\n"},{"role":"assistant","content":"SELECT c.product_types, SUM(oi.quantity) AS TotalSold FROM order_items oi JOIN menu_items mi ON oi.menu_item_id = mi.id JOIN products_table p ON mi.product_id = p.id JOIN categories c ON p.category_id = c.id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the customer details who have orders marked as pre-order.\n"},{"role":"assistant","content":"SELECT cu.first_name, cu.last_name, cu.email, cu.phone_number FROM orders_table o JOIN customers cu ON o.customer_id = cu.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList products and their sales units from the sales unit table.\n"},{"role":"assistant","content":"SELECT p.product_name, su.sales_unit_val FROM products_table p JOIN sales_unit su ON p.product_name = su.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of products sold in each city.\n"},{"role":"assistant","content":"SELECT cu.city, SUM(oi.quantity) AS TotalProductsSold FROM order_items oi JOIN orders_table o ON oi.order_id = o.id JOIN customers cu ON o.customer_id = cu.id GROUP BY cu.city;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the sum of all sales for products that are part of January's menu?\n"},{"role":"assistant","content":"WITH JanuaryMenu AS (SELECT m.product_id, m.price FROM menu_items m WHERE EXTRACT(MONTH FROM CURRENT_DATE) = 1) SELECT p.product_name, SUM(oi.quantity * jm.price) AS TotalSales FROM order_items oi JOIN menu_items m ON oi.menu_item_id = m.id JOIN products_table p ON m.product_id = p.id JOIN JanuaryMenu jm ON p.id = jm.product_id GROUP BY p.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nProvide a list of all products and their associated categories.\n"},{"role":"assistant","content":"SELECT p.product_name, c.product_types FROM products_table p JOIN categories c ON p.category_id = c.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the total value of sales units sold for each product.\n"},{"role":"assistant","content":"SELECT o.product_name, SUM(o.value_of_sales_unit * o.of_sales_unit_sold) AS TotalValueSold FROM orders_december o GROUP BY o.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the pickup date and customer names for all paid orders.\n"},{"role":"assistant","content":"SELECT o.pickup_date, cu.first_name, cu.last_name FROM orders_table o JOIN customers cu ON o.customer_id = cu.id WHERE o.paid = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the number of orders placed by customers who want to be added to the mailing list.\n"},{"role":"assistant","content":"SELECT cu.first_name, cu.last_name, COUNT(o.id) AS NumberOfOrders FROM orders_table o JOIN customers cu ON o.customer_id = cu.id WHERE cu.add_to_mailing_list = TRUE GROUP BY cu.first_name, cu.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet all products with their descriptions for category 'Beverages'.\n"},{"role":"assistant","content":"SELECT p.product_name, p.description FROM products_table p JOIN categories c ON p.category_id = c.id WHERE c.product_types = 'Beverages';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify which sales unit is used most frequently across all menu items.\n"},{"role":"assistant","content":"SELECT su.sales_unit_val, COUNT(mi.id) AS Frequency FROM menu_items mi JOIN sales_unit su ON mi.sales_unit_id = su.id GROUP BY su.sales_unit_val ORDER BY Frequency DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay all categories along with their respective total number of products available.\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(p.id) AS TotalProducts FROM categories c LEFT JOIN products_table p ON c.id = p.category_id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the product name and average price of all menu items.\n"},{"role":"assistant","content":"SELECT p.product_name, AVG(m.price) AS AveragePrice FROM menu_items m JOIN products_table p ON m.product_id = p.id GROUP BY p.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all December orders along with the quantity sold and the sale value for each product.\n"},{"role":"assistant","content":"SELECT o.product_name, o.of_sales_unit_sold AS QuantitySold, o.actual_sold AS SaleValue FROM orders_december o;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDetermine the number of unique customers who have placed an order.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT o.customer_id) AS UniqueCustomers FROM orders_table o;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all email addresses of customers with unpaid orders.\n"},{"role":"assistant","content":"SELECT cu.email FROM orders_table o JOIN customers cu ON o.customer_id = cu.id WHERE o.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total number of orders and total revenue for each customer.\n"},{"role":"assistant","content":"SELECT cu.first_name, cu.last_name, COUNT(o.id) AS TotalOrders, SUM(o.actual_sold) AS TotalRevenue FROM orders_table o JOIN customers cu ON o.customer_id = cu.id JOIN orders_december od ON o.id = od.id GROUP BY cu.first_name, cu.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all product types and the total actual sales for each type.\n"},{"role":"assistant","content":"SELECT product_types, SUM(actual_sold) AS TotalActualSales FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the total number of orders and total quantity of each menu item sold.\n"},{"role":"assistant","content":"SELECT menu_items.product_name, COUNT(order_items.id) AS TotalOrders, SUM(order_items.quantity) AS TotalQuantity FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY menu_items.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGenerate a report showing the average price of products in each category.\n"},{"role":"assistant","content":"SELECT categories.product_types, AVG(menu_items.price) AS AveragePrice FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the most expensive product in each category.\n"},{"role":"assistant","content":"SELECT categories.product_types, products_table.product_name, MAX(menu_items.price) AS MaxPrice FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types, products_table.product_name ORDER BY MaxPrice DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList customers who have placed the highest number of orders.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, COUNT(orders_table.id) AS TotalOrders FROM orders_table JOIN customers ON orders_table.customer_id = customers.id GROUP BY customers.first_name, customers.last_name ORDER BY TotalOrders DESC LIMIT 10;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total revenue from pre-orders as compared to regular orders.\n"},{"role":"assistant","content":"SELECT pre_order, SUM(menu_items.price * order_items.quantity) AS TotalRevenue FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY pre_order;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind out which city has the most customers who opted into the mailing list.\n"},{"role":"assistant","content":"SELECT city, COUNT(id) AS MailingListCustomers FROM customers WHERE add_to_mailing_list = TRUE GROUP BY city ORDER BY MailingListCustomers DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the product with the highest sales unit value in each category.\n"},{"role":"assistant","content":"SELECT categories.product_types, products_table.product_name, MAX(sales_unit.sales_unit_val) AS MaxSalesUnitValue FROM products_table JOIN categories ON products_table.category_id = categories.id JOIN sales_unit ON products_table.product_name = sales_unit.product_name GROUP BY categories.product_types, products_table.product_name ORDER BY MaxSalesUnitValue DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products and their corresponding total sales quantity in descending order.\n"},{"role":"assistant","content":"SELECT products_table.product_name, SUM(order_items.quantity) AS TotalSalesQuantity FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id GROUP BY products_table.product_name ORDER BY TotalSalesQuantity DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay product types and count of distinct products within each type.\n"},{"role":"assistant","content":"SELECT categories.product_types, COUNT(DISTINCT products_table.id) AS DistinctProductCount FROM products_table JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow total sales made by each sales unit.\n"},{"role":"assistant","content":"SELECT sales_unit.product_name, SUM(sales_unit.sales_unit_val * order_items.quantity) AS TotalSales FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id GROUP BY sales_unit.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average sales unit sold for products in December.\n"},{"role":"assistant","content":"SELECT product_name, AVG(of_sales_unit_sold) AS AverageSalesUnitSold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the total quantity and total revenue for each product type.\n"},{"role":"assistant","content":"SELECT orders_december.product_types, SUM(orders_december.of_sales_unit_sold) AS TotalQuantity, SUM(orders_december.value_of_sales_unit * orders_december.of_sales_unit_sold) AS TotalRevenue FROM orders_december GROUP BY orders_december.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify customers who generated the highest revenue through orders.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, SUM(menu_items.price * order_items.quantity) AS TotalRevenue FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN customers ON orders_table.customer_id = customers.id GROUP BY customers.first_name, customers.last_name ORDER BY TotalRevenue DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDetermine which state houses the most number of customers.\n"},{"role":"assistant","content":"SELECT state, COUNT(id) AS CustomerCount FROM customers GROUP BY state ORDER BY CustomerCount DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nAggregate the sales for each product sold to determine the average actual amount sold.\n"},{"role":"assistant","content":"SELECT product_name, AVG(actual_sold) AS AverageActualSold FROM orders_december GROUP BY product_name;"}]}
