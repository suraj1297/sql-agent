{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products with their categories.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all customer names and their email addresses.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all menu items along with their prices.\n"},{"role":"assistant","content":"SELECT product_name, price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat are the total quantities sold for each product in December?\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold) AS TotalQuantitySold FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all orders with their customer names.\n"},{"role":"assistant","content":"SELECT orders_table.id, first_name, last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all sales units with their values.\n"},{"role":"assistant","content":"SELECT product_name, sales_unit_val FROM sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all menu items with their sales units and prices.\n"},{"role":"assistant","content":"SELECT products_table.product_name, sales_unit.sales_unit_val, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat are the notes for each pre-order?\n"},{"role":"assistant","content":"SELECT notes FROM orders_table WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve customer details for all customers on the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email, street_address, state, zip_code FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all products with their descriptions.\n"},{"role":"assistant","content":"SELECT product_name, description FROM products_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all order items with their quantities for each order.\n"},{"role":"assistant","content":"SELECT order_id, product_name, quantity FROM order_items JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all unpaid orders.\n"},{"role":"assistant","content":"SELECT id FROM orders_table WHERE paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify products sold in each category for December.\n"},{"role":"assistant","content":"SELECT categories.product_types, orders_december.product_name FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types, orders_december.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all customers from a specific city.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE city = 'YourCityName';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList distinct product types available.\n"},{"role":"assistant","content":"SELECT DISTINCT product_types FROM categories;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all pre-orders and their pickup dates.\n"},{"role":"assistant","content":"SELECT id, pickup_date FROM orders_table WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all products and their corresponding categories.\n"},{"role":"assistant","content":"SELECT product_name, product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers with their phone numbers.\n"},{"role":"assistant","content":"SELECT first_name, last_name, phone_number FROM customers;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total revenue for each product type in December?\n"},{"role":"assistant","content":"SELECT product_types, SUM(actual_sold) AS TotalRevenue FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all products on the menu with their sales units and values.\n"},{"role":"assistant","content":"SELECT products_table.product_name, sales_unit.sales_unit_val, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products sold with their quantities and total revenue.\n"},{"role":"assistant","content":"SELECT product_name, SUM(of_sales_unit_sold) AS total_quantity, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all customers who have pre-ordered items.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total amount of money spent by each customer on their orders.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, SUM(order_items.quantity * menu_items.price) AS total_spent FROM customers JOIN orders_table ON customers.id = orders_table.customer_id JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY customers.first_name, customers.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet all products that belong to each category.\n"},{"role":"assistant","content":"SELECT categories.product_types, products_table.product_name FROM categories JOIN products_table ON categories.id = products_table.category_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total sales value for each product type in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_sales FROM orders_december GROUP BY product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the details of all customers who opted into the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email, city, state FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all menu items and their prices.\n"},{"role":"assistant","content":"SELECT products_table.product_name, sales_unit.sales_unit_val, menu_items.price FROM menu_items JOIN products_table ON menu_items.product_id = products_table.id JOIN sales_unit ON menu_items.sales_unit_id = sales_unit.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the most sold product in December by quantity.\n"},{"role":"assistant","content":"SELECT product_name, MAX(of_sales_unit_sold) as max_quantity_sold FROM orders_december GROUP BY product_name ORDER BY max_quantity_sold DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the email and phone number of customers who have not paid for their orders.\n"},{"role":"assistant","content":"SELECT customers.email, customers.phone_number FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE orders_table.paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total quantity sold and value for each sales unit in December.\n"},{"role":"assistant","content":"SELECT sales_unit, SUM(of_sales_unit_sold) AS total_quantity_sold, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_value FROM orders_december GROUP BY sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow customer details along with the number of orders they made.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, customers.email, COUNT(orders_table.id) AS number_of_orders FROM customers LEFT JOIN orders_table ON customers.id = orders_table.customer_id GROUP BY customers.first_name, customers.last_name, customers.email;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all orders placed on a given pickup date.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE pickup_date = '2023-12-15';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total quantity and revenue for each product from the menu.\n"},{"role":"assistant","content":"SELECT products_table.product_name, SUM(order_items.quantity) AS total_quantity, SUM(order_items.quantity * menu_items.price) AS total_revenue FROM products_table JOIN menu_items ON products_table.id = menu_items.product_id JOIN order_items ON menu_items.id = order_items.menu_item_id GROUP BY products_table.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the product and category with the highest sales revenue.\n"},{"role":"assistant","content":"SELECT categories.product_types, products_table.product_name, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types, products_table.product_name ORDER BY total_revenue DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all products that have been picked up, including the customer's details.\n"},{"role":"assistant","content":"SELECT products_table.product_name, customers.first_name, customers.last_name, orders_table.pickup_date FROM orders_table JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id JOIN products_table ON menu_items.product_id = products_table.id JOIN customers ON orders_table.customer_id = customers.id WHERE orders_table.pickup_date IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList products with their corresponding category and total sales units for December.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types, SUM(of_sales_unit_sold) AS total_sales_units FROM orders_december JOIN products_table ON orders_december.product_name = products_table.product_name JOIN categories ON products_table.category_id = categories.id GROUP BY products_table.product_name, categories.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay customer information along with the total revenue they generated through their orders.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, customers.email, SUM(order_items.quantity * menu_items.price) AS total_revenue FROM customers JOIN orders_table ON customers.id = orders_table.customer_id JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY customers.first_name, customers.last_name, customers.email;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGenerate a report of all orders along with the total price for each order.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name, SUM(order_items.quantity * menu_items.price) AS total_price FROM orders_table JOIN customers ON orders_table.customer_id = customers.id JOIN order_items ON orders_table.id = order_items.order_id JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY orders_table.id, customers.first_name, customers.last_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the top three products with the highest revenue for December.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december GROUP BY product_name ORDER BY total_revenue DESC LIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all orders where only unpaid items exist.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who have placed orders along with their email addresses.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, customers.email FROM customers INNER JOIN orders_table ON customers.id = orders_table.customer_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many pre-orders were made by customers from the city 'New York'?\n"},{"role":"assistant","content":"SELECT COUNT(*) FROM orders_table INNER JOIN customers ON orders_table.customer_id = customers.id WHERE customers.city = 'New York' AND orders_table.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total revenue generated from products in the 'Electronics' category?\n"},{"role":"assistant","content":"SELECT SUM(menu_items.price * order_items.quantity) AS TotalRevenue FROM order_items INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id INNER JOIN products_table ON menu_items.product_id = products_table.id INNER JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Electronics';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all distinct product names sold in December along with their types.\n"},{"role":"assistant","content":"SELECT DISTINCT orders_december.product_name, categories.product_types FROM orders_december INNER JOIN products_table ON orders_december.product_name = products_table.product_name INNER JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich products listed under 'Beverages' category were most frequently sold?\n"},{"role":"assistant","content":"SELECT products_table.product_name, COUNT(*) AS Frequency FROM order_items INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id INNER JOIN products_table ON menu_items.product_id = products_table.id INNER JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Beverages' GROUP BY products_table.product_name ORDER BY Frequency DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average price of products sold in the 'Furniture' category.\n"},{"role":"assistant","content":"SELECT AVG(menu_items.price) AS AveragePrice FROM menu_items INNER JOIN products_table ON menu_items.product_id = products_table.id INNER JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Furniture';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nReport the total number of orders placed for each state.\n"},{"role":"assistant","content":"SELECT customers.state, COUNT(orders_table.id) AS TotalOrders FROM customers INNER JOIN orders_table ON customers.id = orders_table.customer_id GROUP BY customers.state;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList out all customers who opted for the mailing list.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich product had the highest sales unit value in December?\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december ORDER BY value_of_sales_unit DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify all the orders that contain products from the 'Clothing' category.\n"},{"role":"assistant","content":"SELECT orders_table.id FROM orders_table INNER JOIN order_items ON orders_table.id = order_items.order_id INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id INNER JOIN products_table ON menu_items.product_id = products_table.id INNER JOIN categories ON products_table.category_id = categories.id WHERE categories.product_types = 'Clothing';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total quantity of products sold by customers living in 'California'?\n"},{"role":"assistant","content":"SELECT SUM(order_items.quantity) FROM order_items INNER JOIN orders_table ON order_items.order_id = orders_table.id INNER JOIN customers ON orders_table.customer_id = customers.id WHERE customers.state = 'California';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all product types that have generated more than $5,000 in revenue this December.\n"},{"role":"assistant","content":"SELECT categories.product_types FROM orders_december INNER JOIN products_table ON orders_december.product_name = products_table.product_name INNER JOIN categories ON products_table.category_id = categories.id GROUP BY categories.product_types HAVING SUM(orders_december.value_of_sales_unit * orders_december.of_sales_unit_sold) > 5000;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many unique customers have made purchases for 'Electronics' in December?\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT orders_table.customer_id) FROM orders_december INNER JOIN products_table ON orders_december.product_name = products_table.product_name INNER JOIN categories ON products_table.category_id = categories.id INNER JOIN orders_table ON orders_december.product_name = products_table.product_name WHERE categories.product_types = 'Electronics';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nDisplay all order details where picked-up date is scheduled in the next year.\n"},{"role":"assistant","content":"SELECT * FROM orders_table WHERE EXTRACT(YEAR FROM pickup_date) = EXTRACT(YEAR FROM CURRENT_DATE) + 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all customers with more than one note listed in their account.\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE other_notes IS NOT NULL;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all product names and their sales unit where more than 100 units were sold in December.\n"},{"role":"assistant","content":"SELECT product_name, sales_unit FROM orders_december WHERE of_sales_unit_sold > 100;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGather information about customers who ordered products worth more than $1,000 in a single order.\n"},{"role":"assistant","content":"SELECT customers.first_name, customers.last_name, orders_table.id AS order_id FROM customers INNER JOIN orders_table ON customers.id = orders_table.customer_id INNER JOIN order_items ON orders_table.id = order_items.order_id INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id GROUP BY customers.first_name, customers.last_name, orders_table.id HAVING SUM(menu_items.price * order_items.quantity) > 1000;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the top 5 cities with the most orders placed.\n"},{"role":"assistant","content":"SELECT city, COUNT(id) AS total_orders FROM customers JOIN orders_table ON customers.id = orders_table.customer_id GROUP BY city ORDER BY total_orders DESC LIMIT 5;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products along with their categories.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve orders where customers opted in for the mailing list.\n"},{"role":"assistant","content":"SELECT orders_table.id, customers.first_name, customers.last_name FROM orders_table JOIN customers ON orders_table.customer_id = customers.id WHERE customers.add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCount how many distinct products are available.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_name) AS distinct_products_count FROM products_table;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFor each city, find the total number of orders placed by customers belonging to that city.\n"},{"role":"assistant","content":"SELECT city, COUNT(orders_table.id) AS order_count FROM customers JOIN orders_table ON customers.id = orders_table.customer_id GROUP BY city;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products sold in December with their total revenue.\n"},{"role":"assistant","content":"SELECT product_name, SUM(actual_sold) AS total_revenue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the average price of each menu item.\n"},{"role":"assistant","content":"SELECT product_id, AVG(price) AS average_price FROM menu_items GROUP BY product_id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the customer who placed the most orders.\n"},{"role":"assistant","content":"SELECT customer_id, COUNT(id) AS orders_count FROM orders_table GROUP BY customer_id ORDER BY orders_count DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind out which product type has the highest total sales units in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS total_sales_units FROM orders_december GROUP BY product_types ORDER BY total_sales_units DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve all customers who have made pre-orders.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers JOIN orders_table ON customers.id = orders_table.customer_id WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all unpaid orders.\n"},{"role":"assistant","content":"SELECT id FROM orders_table WHERE paid = FALSE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the product sold the most in terms of quantity.\n"},{"role":"assistant","content":"SELECT product_name FROM orders_december ORDER BY of_sales_unit_sold DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total revenue for each product, sorted by highest to lowest.\n"},{"role":"assistant","content":"SELECT product_name, SUM(value_of_sales_unit * of_sales_unit_sold) AS total_revenue FROM orders_december GROUP BY product_name ORDER BY total_revenue DESC;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nGet the total number of customers in each state.\n"},{"role":"assistant","content":"SELECT state, COUNT(*) AS total_customers FROM customers GROUP BY state;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the top 3 most expensive menu items.\n"},{"role":"assistant","content":"SELECT product_id, price FROM menu_items ORDER BY price DESC LIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the product categories with more than 5 products listed.\n"},{"role":"assistant","content":"SELECT product_types FROM categories JOIN products_table ON categories.id = products_table.category_id GROUP BY product_types HAVING COUNT(products_table.id) > 5;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all customers who live in a particular ZIP code.\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers WHERE zip_code = '12345';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products and their categories.\n"},{"role":"assistant","content":"SELECT products_table.product_name, categories.product_types FROM products_table INNER JOIN categories ON products_table.category_id = categories.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich customers are listed to receive the mailing list?\n"},{"role":"assistant","content":"SELECT first_name, last_name, email FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow details of all menu items including product name and price.\n"},{"role":"assistant","content":"SELECT products_table.product_name, menu_items.price FROM menu_items INNER JOIN products_table ON menu_items.product_id = products_table.id;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWho ordered pre-order items?\n"},{"role":"assistant","content":"SELECT first_name, last_name FROM customers INNER JOIN orders_table ON customers.id = orders_table.customer_id WHERE pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all unique sales units available.\n"},{"role":"assistant","content":"SELECT DISTINCT sales_unit FROM sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind all products that belong to a specified category.\n"},{"role":"assistant","content":"SELECT product_name FROM products_table WHERE category_id = (SELECT id FROM categories WHERE product_types = 'SPECIFIED_CATEGORY');"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhich orders include a specific product?\n"},{"role":"assistant","content":"SELECT orders_table.id FROM orders_table INNER JOIN order_items ON orders_table.id = order_items.order_id INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id INNER JOIN products_table ON menu_items.product_id = products_table.id WHERE products_table.product_name = 'SPECIFIC_PRODUCT';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the total number of items sold in December.\n"},{"role":"assistant","content":"SELECT SUM(of_sales_unit_sold) AS TotalItemsSold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total revenue generated in December?\n"},{"role":"assistant","content":"SELECT SUM(actual_sold) AS TotalRevenue FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all customers who have purchased more than 5 items in a single order.\n"},{"role":"assistant","content":"WITH OrderQuantities AS (SELECT orders_table.customer_id, SUM(order_items.quantity) AS TotalQuantity FROM orders_table INNER JOIN order_items ON orders_table.id = order_items.order_id GROUP BY orders_table.customer_id) SELECT customers.first_name, customers.last_name FROM customers INNER JOIN OrderQuantities ON customers.id = OrderQuantities.customer_id WHERE TotalQuantity > 5;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the number of unique products sold in December.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_name) AS UniqueProductsSold FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the average price of all menu items?\n"},{"role":"assistant","content":"SELECT AVG(price) AS AveragePrice FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all orders placed by customers from a specific city.\n"},{"role":"assistant","content":"SELECT orders_table.id FROM orders_table INNER JOIN customers ON orders_table.customer_id = customers.id WHERE customers.city = 'SPECIFIC_CITY';"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many pre-orders were there for December?\n"},{"role":"assistant","content":"SELECT COUNT(*) AS PreOrders FROM orders_table WHERE pre_order = TRUE AND EXTRACT(MONTH FROM pickup_date) = 12;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all sales units and their corresponding values in December.\n"},{"role":"assistant","content":"SELECT sales_unit, value_of_sales_unit FROM orders_december GROUP BY sales_unit, value_of_sales_unit;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow all menu items ordered with quantities for a specific order.\n"},{"role":"assistant","content":"SELECT products_table.product_name, order_items.quantity FROM order_items INNER JOIN menu_items ON order_items.menu_item_id = menu_items.id INNER JOIN products_table ON menu_items.product_id = products_table.id WHERE order_items.order_id = SPECIFIC_ORDER_ID;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all categories and the total number of products in each.\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(p.id) AS TotalProducts FROM categories c JOIN products_table p ON c.id = p.category_id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total value of orders for each customer.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS CustomerName, SUM(mi.price * oi.quantity) AS TotalOrderValue FROM customers c JOIN orders_table o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id GROUP BY CustomerName;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the average price per product in the menu.\n"},{"role":"assistant","content":"SELECT AVG(price) AS AveragePrice FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList each product type and the average sales unit sold in December.\n"},{"role":"assistant","content":"SELECT o.product_types, AVG(o.of_sales_unit_sold) AS AverageSalesUnitSold FROM orders_december o GROUP BY o.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total quantity of sales units sold for each sales unit type.\n"},{"role":"assistant","content":"SELECT s.product_name, SUM(o.quantity) AS TotalSalesUnitsSold FROM sales_unit s JOIN menu_items m ON s.id = m.sales_unit_id JOIN order_items o ON m.id = o.menu_item_id GROUP BY s.product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList the top 3 products by revenue.\n"},{"role":"assistant","content":"SELECT p.product_name, SUM(mi.price * oi.quantity) AS TotalRevenue FROM products_table p JOIN menu_items mi ON p.id = mi.product_id JOIN order_items oi ON mi.id = oi.menu_item_id GROUP BY p.product_name ORDER BY TotalRevenue DESC LIMIT 3;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total number of orders made by each customer.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS CustomerName, COUNT(o.id) AS TotalOrders FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY CustomerName;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nRetrieve the total revenue generated in December.\n"},{"role":"assistant","content":"SELECT SUM(actual_sold) AS TotalRevenueDecember FROM orders_december;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the total number of unique products listed on the menu.\n"},{"role":"assistant","content":"SELECT COUNT(DISTINCT product_id) AS TotalUniqueProducts FROM menu_items;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nShow the total number of unpaid orders for each customer.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS CustomerName, COUNT(o.id) AS UnpaidOrders FROM customers c JOIN orders_table o ON c.id = o.customer_id WHERE o.paid = FALSE GROUP BY CustomerName;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nIdentify the product type with the highest sales unit sold in December.\n"},{"role":"assistant","content":"SELECT product_types FROM orders_december ORDER BY of_sales_unit_sold DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many customers are on the mailing list?\n"},{"role":"assistant","content":"SELECT COUNT(id) AS MailingListCount FROM customers WHERE add_to_mailing_list = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nWhat is the total value of all pre-orders made?\n"},{"role":"assistant","content":"SELECT SUM(mi.price * oi.quantity) AS TotalPreOrderValue FROM orders_table o JOIN order_items oi ON o.id = oi.order_id JOIN menu_items mi ON oi.menu_item_id = mi.id WHERE o.pre_order = TRUE;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nList all products with their average sales unit value in the orders of December.\n"},{"role":"assistant","content":"SELECT product_name, AVG(value_of_sales_unit) AS AverageSalesUnitValue FROM orders_december GROUP BY product_name;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nHow many products belong to each category?\n"},{"role":"assistant","content":"SELECT c.product_types, COUNT(p.id) AS NumberOfProducts FROM categories c JOIN products_table p ON c.id = p.category_id GROUP BY c.product_types;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nFind the customer who has the most number of orders.\n"},{"role":"assistant","content":"SELECT CONCAT(c.first_name, ' ', c.last_name) AS CustomerName, COUNT(o.id) AS NumberOfOrders FROM customers c JOIN orders_table o ON c.id = o.customer_id GROUP BY CustomerName ORDER BY NumberOfOrders DESC LIMIT 1;"}]}
{"messages":[{"role":"system","content":"Jaarus is SQL Parser who learns schema and generates only PostgreSQL query"},{"role":"user","content":"CREATE TABLE IF NOT EXISTS categories (\n    id SERIAL PRIMARY KEY,\n    product_types TEXT\n);\n\nCREATE TABLE IF NOT EXISTS customers (\n    id SERIAL PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    street_address TEXT,\n    state TEXT,\n    zip_code TEXT,\n    email TEXT,\n    phone_number TEXT,\n    city TEXT,\n    add_to_mailing_list BOOLEAN,\n    other_notes TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products_table (\n    id SERIAL PRIMARY KEY,\n    category_id INTEGER NOT NULL,\n    product_name TEXT NOT NULL,\n    description TEXT,\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_table (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER NOT NULL,\n    paid BOOLEAN,\n    pre_order BOOLEAN,\n    notes TEXT,\n    pickup_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE IF NOT EXISTS sales_unit (\n    id SERIAL PRIMARY KEY,\n    product_name TEXT NOT NULL,\n    sales_unit_val INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS menu_items (\n    id SERIAL PRIMARY KEY,\n    product_id INTEGER NOT NULL,\n    sales_unit_id INTEGER NOT NULL,\n    price NUMERIC(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products_table(id),\n    FOREIGN KEY (sales_unit_id) REFERENCES sales_unit(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER NOT NULL,\n    menu_item_id INTEGER NOT NULL,\n    quantity INTEGER NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders_table(id),\n    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders_december (\n    product_types TEXT,\n    product_name TEXT,\n    sales_unit TEXT,\n    of_sales_unit_sold NUMERIC(10, 2),\n    value_of_sales_unit NUMERIC(10, 2),\n    actual_sold NUMERIC(10, 2)\n);\n\n\nCalculate the total quantity and revenue for a specific product type sold in December.\n"},{"role":"assistant","content":"SELECT product_types, SUM(of_sales_unit_sold) AS TotalQuantity, SUM(actual_sold) AS TotalRevenue FROM orders_december WHERE product_types = '<SPECIFIC_TYPE>' GROUP BY product_types;"}]}
